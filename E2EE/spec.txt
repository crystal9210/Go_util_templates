files in this dir is for e2ee implement in golang, and I referred to the article ;https://zenn.dev/shi0n/articles/12fc6d4255feef

【概要】
E2EEでは、メッセージの送信者と受信者のみがメッセージの内容を読むことができ、中継者（サーバーを含む）はメッセージの内容を解読できません。具体的には、以下のステップでE2EEが実現されています。

鍵ペアの生成 (GenerateKeyPair関数): それぞれのユーザー（AとB）が自分自身の公開鍵と秘密鍵のペアを生成します。

公開鍵の交換: ユーザーAとユーザーBが互いの公開鍵を交換します。

共有秘密鍵の生成 (ComputeSharedSecret関数): 交換した公開鍵と自分の秘密鍵を使って、両者が共有する秘密鍵を生成します。この共有秘密鍵は、メッセージの暗号化と復号化に使用されます。

メッセージの暗号化 (EncryptWithAESGCM関数): 生成された共有秘密鍵を使用して、メッセージを暗号化します。この関数では、AES-GCMモードを使用してメッセージを暗号化し、ソルトとノンスも結果に含めています。

メッセージの復号化 (DecryptWithAESGCM関数): 受信者が共有秘密鍵を使用して、受け取った暗号化されたメッセージを復号化します。

このプロセスにより、メッセージは送信者から受信者へ安全に送信され、第三者による読み取りが防がれます。ただし、実際のアプリケーションでは以下の点に注意が必要です。

公開鍵の安全な交換: 実際の実装では、公開鍵を安全に交換するためのメカニズム（例えば、デジタル署名を使用した公開鍵の検証）を導入する必要があります。
エラーハンドリング: エラー処理を丁寧に行い、セキュリティリスクを最小限に抑えることが重要です。
鍵の管理: 鍵の生成、保存、更新、廃棄を適切に管理する必要があります。
提供されたコードはE2EEの基本的な実装を示しており、実際のアプリケーションに適用するには、セキュリティ、エラーハンドリング、鍵管理などの追加的な考慮が必要です。





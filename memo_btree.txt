・Eq(Item) bool: Item インターフェースを実装する型が、与えられた Item と等しいかどうかを確認するためのメソッド

・Less(Item) bool: Item インターフェースを実装する型が、与えられた Item より小さいかどうかを確認するためのメソッド

・Go言語におけるnull:nil

・Go言語における"レシーバ"：
Go言語において、「レシーバ」（Receiver）は、メソッド（Method）が属する型（Type）のインスタンスを指すための特別な引数です。レシーバは、メソッドを呼び出す際に、そのメソッドがどのインスタンスに対して実行されるかを示す役割を果たします。一般的に、以下のような構文で定義されます：

go
Copy code
func (r Type) MethodName(parameters) returnType {
    // メソッドの実装
}
ここでの要素は次の通りです：

(r Type): メソッドの定義部分で、レシーバを示します。(r Type) の部分で、r はレシーバ名、Type はレシーバが属する型を表します。このレシーバは、メソッドが呼び出された際にそのメソッドに関連付けられたインスタンスを指します。

MethodName: メソッドの名前です。メソッドを呼び出すために使用されます。

parameters: メソッドが受け取る引数（パラメータ）のリストです。

returnType: メソッドが返す値の型を示します。returnType は省略することもできます。

☆☆注意：Golangにはオーバーライドの概念がない→同名かつ同様の形式の関数を呼び出したい→同じパッケージ内には一つの同一の関数(処理は違う)は存在してはいけないので、同一パッケージ内で同じ名前の関数を引数が異なるシグネチャで宣言することはできない。Go言語の関数はシグネチャ（関数名と引数の型の組み合わせ）で一意に識別されるため、同じ名前の関数が同一パッケージ内で複数回宣言されるとコンパイルエラーになる。
→異なるパッケージから関数を呼び出したいときは外部パッケージ名をプレフィックス(特定の文字列や単語が他の文字列や単語の前に置かれることを意味)として関数名の前に追加する

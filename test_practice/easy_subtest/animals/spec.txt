①外部テストパッケージとは：
Go言語において、テスト対象のパッケージとは異なるパッケージ空間でテストを行う方法
具体的には、テスト対象のパッケージ名に_testを付加したパッケージ名（例：mypackage_test）をテストファイルで宣言することで、テストコードはテスト対象のパッケージとは別のパッケージとして扱われます。これにより、テスト対象のパッケージの公開APIのみを使用してテストを行うことが強制されます。

②テスト中に循環依存する：
循環依存とは、2つ以上のパッケージが互いにインポートし合っている状態を指します。例えば、パッケージAがパッケージBをインポートし、同時にパッケージBもパッケージAをインポートしている場合、これらのパッケージは循環依存しています。Goでは、循環依存はコンパイルエラーを引き起こします。テストでは特に、テスト対象のパッケージがテストコードをインポートしようとする
(理論上ありえるだけで実際に通常の開発をする場合は、テスト対象のパッケージ(＊本番コード)がテストコードをインポートすることはない)
と循環依存が発生する可能性があるため、テストコードは通常、外部テストパッケージとして分離されます。

③パッケージ内のAPIの公開・非公開の区別：
公開: 名前が大文字で始まる場合
非公開: 名前が小文字で始まる場合

④パッケージのカプセル化とテストの実施：
パッケージのカプセル化は、パッケージ内の実装詳細（非公開API）を隠蔽し、公開APIを通じてのみパッケージの機能を提供することを指します。これにより、パッケージの使用者は実装の詳細を気にすることなく、公開されたインターフェースを通じて機能を利用できます。

テストコードを書く際の一般的なアプローチは、確かに依存関係のあるパッケージ内で最も基本となる呼び出し元のパッケージに対してテストを行い、テスト中にそのパッケージが依存する他のパッケージをインポートして使用することです。このプロセスでは、テスト対象のパッケージ（およびその公開API）の正確な動作を検証し、テスト対象のパッケージが他のパッケージと正しく連携して動作することを確認します。

⑤公開APIについて：
Go言語における公開APIは、関数やメソッドに限らず、構造体やインターフェース、さらには型エイリアスや定数など、名前が大文字から始まるすべての宣言に適用されます。つまり、大文字で始まる名前の構造体やそのフィールド、インターフェースなどもパッケージ外部からアクセス可能

【注意】
①テストするときは、テストファイル名もテスト用パッケージ名に一致させる
②というかなるべく、パッケージ名とファイル名一致させた方がよさそう知らんけど

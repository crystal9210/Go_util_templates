package main

import "fmt"

// チャネルは、同時ゴルーチンを接続するパイプです。ある goroutine からチャネルに値を送信し、別の goroutine でそれらの値を受信できます。
// 【他の同期を使用することなく】(l:24)
// 「他の同期を使用することなく」というフレーズは、このコンテキストでは、チャネル自体がゴルーチン間の同期メカニズムとして機能し、追加の同期メカニズム（例えば、ロックやウェイトグループなど）を使用せずに、データの送受信が完了するまでプログラムの実行を適切に待機させることができるという意味です。

// Goのチャネルは、データの送受信操作が行われる際に、以下のような同期の振る舞いを自然に提供します：

// 送信操作 (messages <- "ping") は、その値が受信側によって受け取られるまでブロックされます。つまり、送信側のゴルーチンは、チャネルを通じて値を送信しようとするとき、受信側が準備ができるまで待機します。
// 受信操作 (msg := <-messages) も、チャネルに値が送信されるまでブロックされます。この場合、メインルーチンは、ゴルーチンから値が送信されるまで待機します。

func main() {
	messages := make(chan string)

	go func() { messages <- "ping" }() // ゴルーチン①

	msg := <-messages // ゴルーチン①からメインルーチンにデータを渡す。この時、メインルーチン側の受け皿＝msg変数
	fmt.Println(msg)
}

// プログラムを実行すると、"ping"メッセージはチャネルを介してあるゴルーチンから別のゴルーチンに正常に渡されます。
// デフォルトでは、送信側と受信側の両方の準備が整うまで、送受信はブロックされます。"ping" このプロパティにより、他の同期を使用することなく、プログラムの最後でメッセージを待つことができました。

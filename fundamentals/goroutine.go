package main

import (
	"fmt"
	"time"
)

func f(from string) {
	for i := 0; i < 3; i++ {
		fmt.Println(from, ":", i)
	}
}

func main() {
	// f("direct")
	go f("direct")
	go f("groutine")

	go func(msg string) {
		fmt.Println(msg)
	}("going")

	time.Sleep(time.Second)
	fmt.Println("done")

}

// このプログラムを実行すると、最初にブロッキング呼び出しの出力が表示され、次に 2 つのゴルーチンの出力が表示されます。ゴルーチンは Go ランタイムによって同時に実行されるため、ゴルーチンの出力はインターリーブされる可能性があります。
// →どういう意味か：
// ブロッキング呼び出しは、プログラムが特定の操作を行う際に、その操作が完了するまでプログラムの実行が一時停止することを指します。これは、通常、リソースが利用可能になるまで待機する必要がある場合や、他のゴルーチンが特定の条件を満たすまで待機する必要がある場合に発生します。

// たとえば、チャネルへの書き込みや読み取り、ファイルの読み書き、ネットワークリクエストなどの操作がブロッキング呼び出しの例です。これらの操作は、データが送信されたり受信されたり、リソースが利用可能になるまで待機する必要があります。

// 一方、インターリーブされるとは、複数の処理が交互に実行されることを意味します。ゴルーチンは、Go ランタイムによって管理される軽量スレッドであり、複数のゴルーチンが同時に実行されることがあります。したがって、複数のゴルーチンが同時に実行されている場合、その出力は互いに交互に行われることがあります。
//  "interleave" と書きます。これは、複数のものが交互に交差して配置されることを指します。ソフトウェアの文脈では、複数の処理が交互に実行されることを意味します。例えば、複数のゴルーチンが同時に実行され、その出力が交互に行われる場合などがあります。
